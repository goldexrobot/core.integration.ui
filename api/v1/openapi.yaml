openapi: 3.0.0

info:
  title: UI API
  version: 1.0.1
  description: |-
    Goldex Robot terminal exposes [JSONRPC 2](https://www.jsonrpc.org/specification) API over [Websocket](https://en.wikipedia.org/wiki/WebSocket) connection at `localhost:80/ws`. Websocket messages are textual, not binary.
    
    The API:
    * exposes __methods__ to call by a UI, defined as `POST` is this doc ([request](https://www.jsonrpc.org/specification#request_object) in terms of JSONRPC).
    * sends __events__, defined as `PATCH` here ([notification](https://www.jsonrpc.org/specification#notification) in terms of JSONRPC).

    Actual JSONRPC method/event name is defined in this document after slash `/` symbol. For example:

    `"POST /inlet.open"`

    means JSONRPC request to the method `inlet.open`:

    `{"jsonrpc":"2.0","id":1,"method":"inlet.open","params":{...}}`
    
    **Note!** Request ID **must be** of type integer.

    ---
    
    Default flow for an item evaluation (for buyout/pawnshop flow):
    1. Check `status` to ensure the robot is online and required hardware is available.
    2. Begin a new evaluation with `eval.new`.
    3. Open the inlet window `inlet.open` and notify the customer.
    4. Accept the item and close the inlet window with `inlet.close`.
    5. Begin a spectral evaluation with `eval.spectrum`. In case of rejection of the item or an explicit cancellation by the customer perform `eval.return` and then `outlet.close`.
    6. Begin a hydrostatic evaluation with `eval.hydro`. In case of rejection of the item or an explicit cancellation by the customer perform `eval.return` and then `outlet.close`.
    7. Perform the customer identification, payment processing and whatever is needed by your business flow. In case of critical failure or an explicit cancellation by the customer perform `eval.return` and then `outlet.close`.
    8. Move the evaluated item to the robot internal storage with `eval.store`.

tags: 
  - name: 'window'
  - name: 'eval'
  - name: 'other'
  - name: 'event'
  
paths:

  #
  # Windows
  #
  
  /inlet.open:
    post:
      summary: Open inlet window
      description: Requires hardware to open inlet window. Should be called to receive a customer item before an evaluation.
      tags:
        - window
      operationId: inletOpen
      requestBody:
        $ref: '#/components/requestBodies/EmptyParams'
      responses:
        default:
          $ref: '#/components/responses/EmptyResult'
        x-error:
          $ref: '#/components/responses/Error'

  /inlet.close:
    post:
      summary: Close inlet window
      description: Requires hardware to close the inlet window. Should be called right before an evaluation start.
      tags:
        - window
      operationId: inletClose
      requestBody:
        $ref: '#/components/requestBodies/EmptyParams'
      responses:
        default:
          $ref: '#/components/responses/EmptyResult'
        x-error:
          $ref: '#/components/responses/Error'
          
  /outlet.close:
    post:
      summary: Close outlet window
      description: |-
        Requires hardware to close the outlet window. 
        
        Should be called **manually** after returning of the item or after stored item extraction.
      tags:
        - window
      operationId: outletClose
      requestBody:
        $ref: '#/components/requestBodies/EmptyParams'
      responses:
        default:
          $ref: '#/components/responses/EmptyResult'
        x-error:
          $ref: '#/components/responses/Error'

  #
  # Eval
  #
  
  /eval.new:
    post:
      summary: (1) Start evaluation
      description: 'Prepares a new evaluation operation: check hardware, notify backend server, etc.'
      operationId: evalNew
      tags:
        - eval
      requestBody:
        $ref: '#/components/requestBodies/EmptyParams'
      responses:
        default:
          description: JSONRPC 2.0 result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvalNewResult'
        x-error:
          $ref: '#/components/responses/Error'
          
  /eval.spectrum:
    post:
      summary: (2) Spectral evaluation (takes ~1m)
      description: |-
        Starts a spectral evaluation of the item. Should be called right after `eval.new`.
        
        On successful spectral evaluation the item may be returned back to customer with `eval.return`, otherwise the evaluation should be continued with `eval.hydro`.
      tags:
        - eval
      operationId: evalSpectrum
      requestBody:
        $ref: '#/components/requestBodies/EmptyParams'
      responses:
        default:
          description: JSONRPC 2.0 result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvalSpectrumResult'
        x-error:
          $ref: '#/components/responses/Error'
          
  /eval.hydro:
    post:
      summary: (3) Hydrostatic evaluation (takes ~2m)
      description: |-
        Starts a hydrostatic evaluation of the item. Should be called right after `eval.spectrum`.
        
        On successful hydrostatic evaluation the item may be returned back to customer with `eval.return`.
      tags:
        - eval
      operationId: evalHydro
      requestBody:
        $ref: '#/components/requestBodies/EmptyParams'
      responses:
        default:
          description: JSONRPC 2.0 result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvalHydroResult'
        x-error:
          $ref: '#/components/responses/Error'
          
  /eval.return:
    post:
      summary: (4a) Return item (takes ~20s)
      description: |-
        Starts a returning process of the item. Should be called after spectral/hydrostatic evaluation.
        
        On successful returning outlet window should be closed **manually**: UI button (preferred) or a timeout.
      tags:
        - eval
      operationId: evalReturn
      requestBody:
        $ref: '#/components/requestBodies/EmptyParams'
      responses:
        default:
          $ref: '#/components/responses/EmptyResult'
        x-error:
          $ref: '#/components/responses/Error'
          
  /eval.store:
    post:
      summary: (4b) Store item (takes ~40s)
      description: Requires hardware to transfer a successfully evaluated item into the internal storage.
      tags:
        - eval
      operationId: evalStore
      requestBody:
        description: JSONRPC 2.0 params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvalStoreRequest'
      responses:
        default:
          description: JSONRPC 2.0 result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvalStoreResult'
        x-error:
          $ref: '#/components/responses/Error'
  
  #
  # Other
  #
  
  /status:
    post:
      summary: Current robot status
      description: 'Reports current status: operational status, internet connectivity, optional hardware health.'
      tags:
        - other
      operationId: status
      requestBody:
        $ref: '#/components/requestBodies/EmptyParams'
      responses:
        default:
          description: JSONRPC 2.0 result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResult'
        x-error:
          $ref: '#/components/responses/Error'
          
  /storage.extract:
    post:
      summary: Extract an item from the storage
      description: |-
        Requires hardware to extract an item from the specified storage cell and bring it to the outlet window.
        
        On a successful extraction the outlet window should be closed **manually**: UI button (preferred) or a timeout.
      tags:
        - other
      operationId: storageExtract
      requestBody:
        description: JSONRPC 2.0 params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageExtractRequest'
      responses:
        default:
          description: JSONRPC 2.0 result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageExtractResult'
        x-error:
          $ref: '#/components/responses/Error'
          
  /hardware:
    patch:
      summary: Event from an optional hardware
      description: An event may be generated by optional on-board hardware installed on the robot.
      tags:
        - event
      operationId: hardwareEvent
      requestBody:
        description: JSONRPC 2.0 event params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HardwareEvent'
      responses:
        default:
          description: No response for event
      
    post:
      summary: Call to an optional hardware
      description: Call an RPC method of the optional on-board hardware installed on the robot.
      tags:
        - other
      operationId: hardware
      requestBody:
        description: JSONRPC 2.0 params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HardwareRequest'
      responses:
        default:
          description: JSONRPC 2.0 result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HardwareResult'
        x-error:
          $ref: '#/components/responses/Error'
          
  /proxy:
    post:
      summary: Send a request to the named endpoint of the business backend
      description: |-
        Requires Goldex backend to sign and send an HTTP POST request to the business backend. 
        
        Endpoint address and it's name should be defined with a request to the Goldex API.
      tags:
        - other
      operationId: proxy
      requestBody:
        description: JSONRPC 2.0 params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyRequest'
      responses:
        default:
          description: JSONRPC 2.0 result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyResult'
        x-error:
          $ref: '#/components/responses/Error'

#
# Components
#

components:

  #
  # Schemas
  #
  
  schemas:
  
    #
    # New eval
    #
    
    EvalNewResult:
      description: Data depending on success flag
      oneOf:
        - $ref: '#/components/schemas/EvalNewResultSuccess'
        - $ref: '#/components/schemas/EvalNewResultFailure'
      discriminator:
        propertyName: success
        mapping:
          true: '#/components/schemas/EvalNewResultSuccess'
          false: '#/components/schemas/EvalNewResultFailure'
      
    EvalNewResultSuccess:
      type: object
      required:
        - success
        - eval_id
        - storage_cell
      properties:
        'success':
          type: boolean
        'eval_id':
          description: Evaluation ID
          type: integer
          format: uint64
          example: 1337
        'storage_cell':
          $ref: '#/components/schemas/StorageCell'
          
    EvalNewResultFailure:
      type: object
      required:
        - success
        - failure
      properties:
        'success':
          type: boolean
        'failure':
          type: string
          enum:
            - network_unavailable
            - hardware_check_failed
            - no_storage_room

    #
    # Eval: spectrum
    #
    
    EvalSpectrumResult:
      oneOf:
        - $ref: '#/components/schemas/EvalSpectrumResultSuccess'
        - $ref: '#/components/schemas/EvalSpectrumResultFailure'
      discriminator:
        propertyName: success
        mapping:
          true: '#/components/schemas/EvalSpectrumResultSuccess'
          false: '#/components/schemas/EvalSpectrumResultFailure'
    
    EvalSpectrumResultSuccess:
      type: object
      required:
        - success
        - alloy
        - carat
        - millesimal
        - purity
        - spectrum
      properties:
        'success':
          type: boolean
        'alloy':
          description: Valuable metal
          type: string
          example: au
        'carat':
          description: Fineness in carats
          type: string
          example: 14K
        'millesimal':
          description: Millesimal fineness. 585 stands for 58.5%, 999 for 99.9%, 9999 for 99.99%
          type: integer
          format: int64
          example: 585
        'purity':
          description: Content of the valuable metal in percents
          type: number
          format: double
          example: 58.5
        'spectrum':
          description: Spectrum data
          type: object
          additionalProperties:
            type: number
            format: double
          example:
            au: 58.5
            cu: 14.2
            xx: 0
          x-go-type: map[string]float64
            
    EvalSpectrumResultFailure:
      type: object
      required:
        - success
        - failure
        - reason
      properties:
        'success':
          type: boolean
        'failure':
          type: string
          enum:
            - network_unavailable
            - item_rejected
        'reason':
          $ref: '#/components/schemas/ItemRejectionReason'

    #
    # Eval: hydro
    #
    
    EvalHydroResult:
      oneOf:
        - $ref: '#/components/schemas/EvalHydroResultSuccess'
        - $ref: '#/components/schemas/EvalHydroResultFailure'
      discriminator:
        propertyName: success
        mapping:
          true: '#/components/schemas/EvalHydroResultSuccess'
          false: '#/components/schemas/EvalHydroResultFailure'
    
    EvalHydroResultSuccess:
      type: object
      required:
        - success
        - alloy
        - carat
        - confidence
        - millesimal
        - purity
        - risky
        - warnings
        - weight
      properties:
        'success':
          type: boolean
        'alloy':
          description: Valuable metal
          type: string
          example: au
        'carat':
          description: Fineness in carats
          type: string
          example: 14K
        'confidence':
          description: Evaluation confidence, 1.0 - is confident, 0.0 - is not, 0.8 - is "pretty" confident
          type: number
          format: double
          example: 0.913
        'millesimal':
          description: Millesimal fineness, 585 stands for 58.5%, 999 for 99.9%, 9999 for 99.99%
          type: integer
          format: int64
          example: 585
        'purity':
          description: Content of the valuable metal in percents
          type: number
          format: double
          example: 58.5
        'risky':
          description: Automatic decision result
          type: boolean
        'warnings':
          description: Warnings that should help with decision. For instance, there could be a tungsten covered with gold.
          type: array
          items:
            type: string
          example:
            - tungsten_in_gold
        'weight':
          description: Weight in grams
          type: number
          format: double
          example: 3.141
    
    EvalHydroResultFailure:
      type: object
      required:
        - success
        - failure
        - reason
      properties:
        'success':
          type: boolean
        'failure':
          type: string
          enum:
            - network_unavailable
            - eval_rejected
            - unstable_scale
        'reason':
          $ref: '#/components/schemas/ItemRejectionReason'

    #
    # Eval: store
    #
    
    EvalStoreRequest:
      type: object
      required: 
        - domain
      properties:
        'domain':
          description: Cell occupation operation domain
          type: string
          enum:
            - buyout
            - pawnshop
          x-oapi-codegen-extra-tags:
            validate: required,oneof=buyout pawnshop
    
    EvalStoreResult:
      oneOf:
        - $ref: '#/components/schemas/EvalStoreResultSuccess'
        - $ref: '#/components/schemas/EvalStoreResultFailure'
      discriminator:
        propertyName: success
        mapping:
          true: '#/components/schemas/EvalStoreResultSuccess'
          false: '#/components/schemas/EvalStoreResultFailure'
    
    EvalStoreResultSuccess:
      type: object
      required:
        - success
        - cell
        - transaction
      properties:
        'success':
          type: boolean
        'cell':
          $ref: '#/components/schemas/StorageCell'
        'transaction':
          $ref: '#/components/schemas/StorageCellTransaction'
    
    EvalStoreResultFailure:
      type: object
      required:
        - success
        - failure
      properties:
        'success':
          type: boolean
        'failure':
          type: string
          enum:
            - network_unavailable
            - forbidden

    #
    # Hardware 
    # 
    
    HardwareRequest:
      type: object
      required: 
        - name
        - method
        - params
      properties:
        'name':
          description: Named hardware
          type: string
          example: my-pos
          x-oapi-codegen-extra-tags:
            validate: required
        'method':
          description: Method name
          type: string
          example: my-method
          x-oapi-codegen-extra-tags:
            validate: required
        'params':
          description: Method params
          type: object
          example:
            foo: bar
          x-go-type: json.RawMessage
    
    HardwareResult:
      type: object
      required:
        - result
      properties:
        'result':
          description: Hardware method result
          type: object
          example:
            foo: bar
          x-go-type: json.RawMessage
    
    HardwareEvent:
      type: object
      required:
        - name
        - event
        - data
      properties:
        'name':
          description: Named hardware
          type: string
          example: my-pos
        'event':
          description: Event name
          type: string
          example: my-event
        'data':
          description: Event data
          type: object
          example:
            foo: bar

    #
    # Proxy endpoint
    #
    
    ProxyRequest:
      type: object
      required:
        - endpoint
        - body
      properties:
        'endpoint':
          description: Predefined endpoint name
          type: string
          example: my-method
          x-oapi-codegen-extra-tags:
            validate: required
        'body':
          description: Request key-value
          type: object
          example:
            foo: bar
    
    ProxyResult:
      type: object
      required:
        - body
        - http_status
      properties:
        'body':
          description: Result key-value
          type: object
          example:
            foo: bar
        'http_status':
          description: http status
          type: integer
          format: int64
          example: 200
  
    #
    # Status
    #
    
    StatusResult:
      type: object
      required:
        - project_id
        - bot_id
        - internet_connection
        - operational
        - optional_hardware
        - features
      properties:
        'project_id':
          type: integer
          format: uint64
          example: 1
        'bot_id':
          type: integer
          format: uint64
          example: 42
        'internet_connection':
          description: Internet connectivity
          type: boolean
          example: true
        'operational':
          description: Operational status. False if robot is broken or some mandatory hardware is unavailable
          type: boolean
          example: true
        'optional_hardware':
          description: available optional hardware
          type: object
          additionalProperties:
            type: boolean
          example:
            my-pos: true
          x-go-type: map[string]bool
        'features':
          $ref: '#/components/schemas/StatusResultFeatures'
    
    StatusResultFeatures:
      type: object
      required:
        - storage
        - positional_storage
      properties:
        'storage':
          description: Items storage is available
          type: boolean
          example: true
        'positional_storage':
          description: Items storage is a positional storage (has cells to store items)
          type: boolean
          example: true

    #
    # Storage extraction
    #
    
    StorageExtractRequest:
      type: object
      required: 
        - cell
        - domain
      properties:
        'cell':
          $ref: '#/components/schemas/StorageCell'
        'domain':
          description: Cell release operation domain
          type: string
          enum:
            - shop
            - pawnshop
          x-oapi-codegen-extra-tags:
            validate: required,oneof=shop pawnshop
    
    StorageExtractResult:
      oneOf:
        - $ref: '#/components/schemas/StorageExtractResultSuccess'
        - $ref: '#/components/schemas/StorageExtractResultFailure'
      discriminator:
        propertyName: success
        mapping:
          true: '#/components/schemas/StorageExtractResultSuccess'
          false: '#/components/schemas/StorageExtractResultFailure'
    
    StorageExtractResultSuccess:
      type: object
      required:
        - success
        - transaction
      properties:
        'success':
          type: boolean
        'transaction':
          $ref: '#/components/schemas/StorageCellTransaction'
    
    StorageExtractResultFailure:
      type: object
      required:
        - success
        - failure
      properties:
        'success':
          type: boolean
        'failure':
          type: string
          enum:
            - network_unavailable
            - forbidden

    #
    # Primitives
    #

    StorageCell:
      description: Storage cell address
      type: string
      example: A1
      x-oapi-codegen-extra-tags:
        validate: required,alphanum,min=2,max=4
    
    StorageCellTransaction:
      description: Unique storage cell operation ID
      type: string
      example: 6c8ec8b3e88b4fcaac47f781f5e6343e
      
    ItemRejectionReason:
      description: Reason why the item is rejected by the Goldex. It's non-empty if evaluation failure is `item_rejected`
      type: string
      enum:
        - undescribed   # undescribed reason
        - low_spectrum  # item does not contain enough valuable metal
        - low_weight    # weight is too low
        - high_weight   # weight is too high
        - unconfirmed   # could not to perform cross-checks to confirm fineness

  #
  # Requests
  #

  requestBodies:

    EmptyParams:
      description: JSONRPC 2.0 empty params
      content:
        application/json:
          schema:
            type: object
  
  #
  # Responses
  #
  
  responses:

    EmptyResult:
      description: JSONRPC 2.0 empty result
      content:
        application/json:
          schema:
            type: object
      
    Error:
      description: JSONRPC 2.0 error
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
            properties:
              'code':
                description: Standard or implementation-dependent error code
                type: number
                example: -32700
              'message':
                description: Error description
                type: string
                example: Invalid JSON was received by the server
